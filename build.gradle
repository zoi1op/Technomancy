buildscript { // legacy ew
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.74', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'io.github.p03w.machete' version '2.0.1'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'idea'


def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

boolean ci = System.getenv('CI') != null ? System.getenv('CI').toBoolean() : false

version = "${mc_version}-${mod_version}" + (ci ? "-nightly-${getGitHash()}" : "")
group = project.maven_group
archivesBaseName = project.archives_base_name

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

mixin {
    add sourceSets.main, 'technomancy.refmap.json'
    config 'technomancy.mixins.json'
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: "${parchment}-${mc_version}"

     accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=technomancy.mixins.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                technomancy {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
//            arg "-mixin.config=createcommodities.mixins.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                technomancy {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg "-mixin.config=technomancy.mixins.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '--mod', archivesBaseName, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                technomancy {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name "Cursemaven"
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { // mixins
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven { // jei
        url = "https://maven.blamejared.com/"
        content {
            includeGroup("mezz.jei")
        }
    }

    maven { // create
        url = "https://maven.tterrag.com/"
        content {
            includeGroup("com.simibubi.create")
            includeGroup("com.jozufozu.flywheel")
        }
    }

    maven { // Registrate
        name = "tterrag maven"
        url = "https://maven.tterrag.com/"
    }
}

configurations {
    shade
}

processResources {
    // set up properties for filling into metadata
    def properties = [
            "forge": forge_version.split("\\.")[0], // only specify major version of forge
            "mc": mc_version,
            "create": create_version.split("-")[0] // cut off build number
    ]
    inputs.properties properties

    filesMatching("resources/META-INF/mods.toml") {
        expand properties
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    compileOnly("com.tterrag.registrate:Registrate:${registrate_version}")

    implementation("com.simibubi.create:create-${mc_version}:${create_version}:all") { transitive = false }
    implementation("com.jozufozu.flywheel:flywheel-forge-${mc_version}:${flywheel_version}")

    compileOnly("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly("mezz.jei:jei-${mc_version}:${jei_version}")

    //dev qol
    runtimeOnly(fg.deobf("curse.maven:better-mods-button-541584:4608772"))
    runtimeOnly(fg.deobf("curse.maven:ferritecore-429235:4074294"))
    runtimeOnly(fg.deobf("curse.maven:catalogue-459701:3803098"))

    annotationProcessor 'org.spongepowered:mixin:0.8:processor'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : archivesBaseName,
                "Specification-Vendor"    : "zoiop",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : "zoiop",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', "${group}.repack.registrate"
}

reobf {
    shadowJar {}
}

artifacts {
    archives jar, shadowJar
}

//publishing {
//    tasks.publish.dependsOn 'build'
//    publications {
//        mavenJava(MavenPublication) {
//            artifact shadowJar
//        }
//    }
//    repositories {
//        maven {
//            url "file://${project.projectDir}/mcmodsrepo"
//        }
//    }
//}

machete {
    enabled = ci
}
tasks.withType(Copy).all { duplicatesStrategy 'exclude' }
